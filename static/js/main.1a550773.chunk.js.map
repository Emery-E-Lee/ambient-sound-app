{"version":3,"sources":["audio/campfire.mp3","video/Campfire.mp4","components/slider/Slider.js","components/controls/Button.js","components/controls/ControlPanel.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Slider","_ref","_ref$percentage","percentage","onChange","_useState","useState","_useState2","Object","slicedToArray","position","setPosition","_useState3","_useState4","marginLeft","setMarginLeft","_useState5","_useState6","progressBarWidth","setProgressBarWidth","rangeRef","useRef","thumbRef","useEffect","rangeWidth","current","getBoundingClientRect","width","thumbWidth","centerThumb","centerProgressBar","react_default","a","createElement","className","style","concat","ref","left","type","value","step","Button","play","isPlaying","onClick","ControlPanel","duration","currentTime","secondsToHms","seconds","hours","min","parseInt","sec","controls_Button","App","setPercentage","setIsPlaying","setDuration","_useState7","_useState8","setCurrentTime","audioRef","Fragment","src","videoBg","autoPlay","loop","muted","slider_Slider","e","audio","target","onTimeUpdate","percent","currentTarget","toFixed","time","onLoadedData","song","controls_ControlPanel","volume","pause","reportWebVitals","onPerfEntry","Function","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,4RCqDzBC,MAjDf,SAAAC,GAA8C,IAAAC,EAAAD,EAA5BE,kBAA4B,IAAAD,EAAf,EAAeA,EAAZE,EAAYH,EAAZG,SAAYC,EACZC,mBAAS,GADGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACrCK,EADqCH,EAAA,GAC3BI,EAD2BJ,EAAA,GAAAK,EAERN,mBAAS,GAFDO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAErCE,EAFqCD,EAAA,GAEzBE,EAFyBF,EAAA,GAAAG,EAGIV,mBAAS,GAHbW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGrCE,EAHqCD,EAAA,GAGnBE,EAHmBF,EAAA,GAKtCG,EAAWC,mBACXC,EAAWD,mBAejB,OAbAE,oBAAU,WACR,IAAMC,EAAaJ,EAASK,QAAQC,wBAAwBC,MACtDC,EAAaN,EAASG,QAAQC,wBAAwBC,MACtDE,EAAeD,EAAa,IAAOzB,GAAc,EACjD2B,EACJF,EACCJ,EAAa,IAAOrB,EACpByB,EAAa,IAAOzB,EACvBQ,EAAYR,GACZY,EAAcc,GACdV,EAAoBW,IACnB,CAAC3B,IAGF4B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,qBACVC,MAAO,CACLR,MAAK,GAAAS,OAAKlB,EAAL,SAGTa,EAAAC,EAAAC,cAAA,OACEC,UAAU,QACVG,IAAKf,EACLa,MAAO,CACLG,KAAI,GAAAF,OAAK1B,EAAL,KACJI,WAAU,GAAAsB,OAAKtB,EAAL,SAGdiB,EAAAC,EAAAC,cAAA,SACEM,KAAK,QACLC,MAAO9B,EACP2B,IAAKjB,EACLqB,KAAK,OACLP,UAAU,QACV9B,SAAUA,YCrCHsC,MAPf,SAAAzC,GAAqC,IAAnB0C,EAAmB1C,EAAnB0C,KAAMC,EAAa3C,EAAb2C,UACtB,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKY,QAASF,EAAMT,UAAWU,EAAY,WAAa,qBCmC/CE,MArCf,SAAA7C,GAAkE,IAA1C0C,EAA0C1C,EAA1C0C,KAAMC,EAAoC3C,EAApC2C,UAAWG,EAAyB9C,EAAzB8C,SAAUC,EAAe/C,EAAf+C,YACjD,SAASC,EAAaC,GACpB,IAAKA,EAAS,MAAO,UAErB,IAAIH,EAAWG,EACXC,EAAQJ,EAAW,KACvBA,GAAsB,KAEtB,IAAIK,EAAMC,SAASN,EAAW,IAC9BA,GAAsB,GAEtB,IAAIO,EAAMD,SAASN,GASnB,OAPIO,EAAM,KACRA,EAAG,IAAAlB,OAAOkB,IAERF,EAAM,KACRA,EAAG,IAAAhB,OAAOgB,IAGRC,SAASF,EAAO,IAAM,EACxB,GAAAf,OAAUiB,SAASF,EAAO,IAA1B,MAAAf,OAAkCgB,EAAlC,MAAAhB,OAA0CkB,EAA1C,KACgB,GAAPF,EACT,OAAAhB,OAAckB,EAAd,KAEA,GAAAlB,OAAUgB,EAAV,MAAAhB,OAAkBkB,EAAlB,KAIJ,OACEvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASe,EAAaD,IACrCjB,EAAAC,EAAAC,cAACsB,EAAD,CAAQZ,KAAMA,EAAMC,UAAWA,IAC/Bb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASe,EAAaF,sBCwC5BS,MAvEf,WAAe,IAAAnD,EACuBC,mBAAS,GADhCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNF,EADMI,EAAA,GACMkD,EADNlD,EAAA,GAAAK,EAEqBN,oBAAS,GAF9BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENgC,EAFM/B,EAAA,GAEK6C,EAFL7C,EAAA,GAAAG,EAGmBV,mBAAS,GAH5BW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGN+B,EAHM9B,EAAA,GAGI0C,EAHJ1C,EAAA,GAAA2C,EAIyBtD,mBAAS,GAJlCuD,EAAArD,OAAAC,EAAA,EAAAD,CAAAoD,EAAA,GAINZ,EAJMa,EAAA,GAIOC,EAJPD,EAAA,GAMPE,EAAW1C,mBAkCjB,OACEU,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgC,SAAA,KACEjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACfH,EAAAC,EAAAC,cAAA,SAAOgC,IAAKC,IAASC,UAAQ,EAACC,MAAI,EAACC,OAAK,IACxCtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,2CACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACqC,EAAD,CAAQnE,WAAYA,EAAYC,SAzCzB,SAACmE,GAChB,IAAMC,EAAQT,EAAStC,QACvB+C,EAAMxB,YAAewB,EAAMzB,SAAW,IAAOwB,EAAEE,OAAOjC,MACtDiB,EAAcc,EAAEE,OAAOjC,UAuCfT,EAAAC,EAAAC,cAAA,SACEI,IAAK0B,EACLW,aAvBY,SAACH,GACvB,IAAMI,GACHJ,EAAEK,cAAc5B,YAAcuB,EAAEK,cAAc7B,SAC/C,KACA8B,QAAQ,GACJC,EAAOP,EAAEK,cAAc5B,YAE7BS,GAAekB,GACfb,EAAegB,EAAKD,QAAQ,KAgBlBE,aAAc,SAACR,GACbZ,EAAYY,EAAEK,cAAc7B,SAAS8B,QAAQ,KAE/CZ,IAAKe,MAEPjD,EAAAC,EAAAC,cAACgD,EAAD,CACEtC,KA7CC,WACX,IAAM6B,EAAQT,EAAStC,QACvB+C,EAAMU,OAAS,EAEVtC,IACHc,GAAa,GACbc,EAAM7B,QAGJC,IACFc,GAAa,GACbc,EAAMW,UAmCEvC,UAAWA,EACXG,SAAUA,EACVC,YAAaA,SCxDZoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCxF,EAAAyE,EAAA,GAAAgB,KAAAzF,EAAA0F,KAAA,UAAqBD,KAAK,SAAAtF,GAAiD,IAA9CwF,EAA8CxF,EAA9CwF,OAAQC,EAAsCzF,EAAtCyF,OAAQC,EAA8B1F,EAA9B0F,OAAQC,EAAsB3F,EAAtB2F,OAAQC,EAAc5F,EAAd4F,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHnE,EAAAC,EAAAC,cAACF,EAAAC,EAAMmE,WAAP,KACEpE,EAAAC,EAAAC,cAACmE,EAAD,QAOJhB","file":"static/js/main.1a550773.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/campfire.6f453a5d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Campfire.0d4713d0.mp4\";","import React, { useState, useRef, useEffect } from 'react';\r\nimport './slider.css';\r\nimport './thumb.css';\r\n\r\nfunction Slider({ percentage = 0, onChange }) {\r\n  const [position, setPosition] = useState(0);\r\n  const [marginLeft, setMarginLeft] = useState(0);\r\n  const [progressBarWidth, setProgressBarWidth] = useState(0);\r\n\r\n  const rangeRef = useRef();\r\n  const thumbRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const rangeWidth = rangeRef.current.getBoundingClientRect().width;\r\n    const thumbWidth = thumbRef.current.getBoundingClientRect().width;\r\n    const centerThumb = (thumbWidth / 100) * percentage * -1;\r\n    const centerProgressBar =\r\n      thumbWidth +\r\n      (rangeWidth / 100) * percentage -\r\n      (thumbWidth / 100) * percentage;\r\n    setPosition(percentage);\r\n    setMarginLeft(centerThumb);\r\n    setProgressBarWidth(centerProgressBar);\r\n  }, [percentage]);\r\n\r\n  return (\r\n    <div className=\"slider-container\">\r\n      <div\r\n        className=\"progress-bar-cover\"\r\n        style={{\r\n          width: `${progressBarWidth}px`,\r\n        }}\r\n      ></div>\r\n      <div\r\n        className=\"thumb\"\r\n        ref={thumbRef}\r\n        style={{\r\n          left: `${position}%`,\r\n          marginLeft: `${marginLeft}px`,\r\n        }}\r\n      ></div>\r\n      <input\r\n        type=\"range\"\r\n        value={position}\r\n        ref={rangeRef}\r\n        step=\"0.01\"\r\n        className=\"range\"\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Slider;\r\n","import React from 'react';\r\nimport './button.css';\r\n\r\nfunction Button({ play, isPlaying }) {\r\n  return (\r\n    <div className=\"btn-container\">\r\n      <div onClick={play} className={isPlaying ? 'btn-stop' : 'btn-play'}></div>\r\n    </div>\r\n  );\r\n}\r\nexport default Button;\r\n","import React from 'react';\r\nimport Button from './Button';\r\nimport './control-panel.css';\r\n\r\nfunction ControlPanel({ play, isPlaying, duration, currentTime }) {\r\n  function secondsToHms(seconds) {\r\n    if (!seconds) return '00m 00s';\r\n\r\n    let duration = seconds;\r\n    let hours = duration / 3600;\r\n    duration = duration % 3600;\r\n\r\n    let min = parseInt(duration / 60);\r\n    duration = duration % 60;\r\n\r\n    let sec = parseInt(duration);\r\n\r\n    if (sec < 10) {\r\n      sec = `0${sec}`;\r\n    }\r\n    if (min < 10) {\r\n      min = `0${min}`;\r\n    }\r\n\r\n    if (parseInt(hours, 10) > 0) {\r\n      return `${parseInt(hours, 10)}h ${min}m ${sec}s`;\r\n    } else if (min == 0) {\r\n      return `00m ${sec}s`;\r\n    } else {\r\n      return `${min}m ${sec}s`;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"control-panel\">\r\n      <div className=\"timer\">{secondsToHms(currentTime)}</div>\r\n      <Button play={play} isPlaying={isPlaying} />\r\n      <div className=\"timer\">{secondsToHms(duration)}</div>\r\n    </div>\r\n  );\r\n}\r\nexport default ControlPanel;\r\n","import React, { useState, useRef } from 'react';\r\nimport song from './audio/campfire.mp3';\r\nimport Slider from './components/slider/Slider';\r\nimport ControlPanel from './components/controls/ControlPanel';\r\nimport videoBg from './video/Campfire.mp4';\r\n\r\nfunction App() {\r\n  const [percentage, setPercentage] = useState(0);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [duration, setDuration] = useState(0);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n\r\n  const audioRef = useRef();\r\n\r\n  const onChange = (e) => {\r\n    const audio = audioRef.current;\r\n    audio.currentTime = (audio.duration / 100) * e.target.value;\r\n    setPercentage(e.target.value);\r\n  };\r\n\r\n  const play = () => {\r\n    const audio = audioRef.current;\r\n    audio.volume = 1;\r\n\r\n    if (!isPlaying) {\r\n      setIsPlaying(true);\r\n      audio.play();\r\n    }\r\n\r\n    if (isPlaying) {\r\n      setIsPlaying(false);\r\n      audio.pause();\r\n    }\r\n  };\r\n\r\n  const getCurrDuration = (e) => {\r\n    const percent = (\r\n      (e.currentTarget.currentTime / e.currentTarget.duration) *\r\n      100\r\n    ).toFixed(2);\r\n    const time = e.currentTarget.currentTime;\r\n\r\n    setPercentage(+percent);\r\n    setCurrentTime(time.toFixed(2));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"main\">\r\n        <div className=\"overlay\"></div>\r\n        <video src={videoBg} autoPlay loop muted />\r\n        <div className=\"player\">\r\n          <h1>CampFire</h1>\r\n          <p>...feel the warmthðŸ”¥</p>\r\n          <div className=\"app-container\">\r\n            <Slider percentage={percentage} onChange={onChange} />\r\n            <audio\r\n              ref={audioRef}\r\n              onTimeUpdate={getCurrDuration}\r\n              onLoadedData={(e) => {\r\n                setDuration(e.currentTarget.duration.toFixed(2));\r\n              }}\r\n              src={song}\r\n            ></audio>\r\n            <ControlPanel\r\n              play={play}\r\n              isPlaying={isPlaying}\r\n              duration={duration}\r\n              currentTime={currentTime}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}